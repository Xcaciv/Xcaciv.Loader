# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Debug Build and Test and Publish Nuget Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    env:
      Solution_Name: src\Xcaciv.Loader\Xcaciv.Loader.sln                         # your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src\Xcaciv.Loader\Xcaciv.LoaderTests\Xcaciv.LoaderTests.csproj  # path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Net_Project_Directory: Xcaciv.Loader    # the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Net_Project_Path: src\Xcaciv.Loader\Xcaciv.Loader\Xcaciv.Loader.csproj                   # path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name
    - name: Debug Build
      run: dotnet build $env:Solution_Name --no-restore --configuration Debug
    - name: Test with dotnet
      run: dotnet test $env:Solution_Name --no-build --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
      if: ${{ always() }}

  nugetpush:
    needs: build
    runs-on: windows-latest

    env:
      Nuget_Project_Path: src\Xcaciv.Loader\Xcaciv.Loader\Xcaciv.Loader.csproj  # path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.

    steps:

    - name: Release Build
      run: |
        dotnet build $env:Nuget_Project_Path --no-restore --configuration Release
    - name: Nuget Package
      run: |
        dotnet pack $env:Nuget_Project_Path --no-build  --configuration Release
    - name: Configure Nuget Source
      run: |
        dotnet nuget add source "https://nuget.pkg.github.com/xcaciv/index.json" -n "github" -u xcaciv -p ${{ secrets.NUGET_PAT }} --store-password-in-clear-text
    - name: Nuget Push
      run: |
        dotnet nuget push **\*.nupkg -k ${{ secrets.NUGET_PAT }} -s "github" 
    - name: Cleanup
      if: always()
      continue-on-error: true
      run: |
        dotnet nuget remove source github